simcausal 0.1
==============

* Initial version release to CRAN

simcausal 0.1.9
==============

* Development version update. 

* Added vignette; the node.depr function is no longer supported; updated the documentation for ?simcausal, doLTCF, sim, simobs and simfull, add.action, add.nodes functions; changed examples for node and set.DAG; added .onAttach message;

simcausal 0.2.0
==============

* New CRAN version release.

* Adding vignette; improved documentation for ?simcausal; changing the documentation for sim, simobs and simfull functions; updated documentation add.nodes/+node and add.action/+action syntax; for node.depr is removed from the user access.

simcausal 0.3.0
==============

* New CRAN version release.

* Major updates:
* Addition of network() function that allows simulating networks;
* Support for network-based sampling of dependent data. New syntax Variable[[netindx]] allows one to to index Variable values of friends (connections) (assuming a network has been already generated with the network() function);
* User calling environment is now captured by each call to node() function; this is used as an enclosing environment when evaluating node() function arguments;
* Moving to R6 class node call parser;

* Minor updates:
* Adding global option options(simcausal.verbose) that can be set to FALSE to suppress message printing; default is TRUE;
* Adding network simulation example to /tests/Runit/gen.net.example.R, simulating networks using igraph package; Examples for simulating networks based on igraph ER model;
* Adding conversion utility function to/from sparse adjacency network matrix to simcausal internet network storage;
* Switching from warning to message when replacing/modifying existing DAG node object;

simcausal 0.4.0
==============

* New CRAN version release.

* Fixing a warning on v.0.3.0 for generic "melt" being exported by data.table and reshape2;

* Minor updates to the vignette;

* Fixing an issue with NetIndClass not calling self$make.nF() when outside network matrix is assigned;

* Making nF (vector of the number of friends across observations) available as a special variable that can be used inside node expressions (as distributional parameters);

simcausal 0.5.0
==============

* Major changes since last version 0.4.0.

* Added support for time-varying nodes over network: can index friend nodes with syntactic sugar expressions like Node[[F_indx]], even when this Node is a time-varying random variable. For such nodes, start by using the syntactic indexing by t, i.e., Node[t], then add friend indexing with expressions like Node[t][[F_indx]]. See the forthcoming vignette on networks for examples.

* Added support for latent variables, set.DAG has a new argument v.latent, any node names specified to this argument will be hidden from the simulated data. This allows one to explicitly define errors (Uâ€™s) for each node. This will be also plotted differently by plotDAG.

* set.DAG has a new argument n.test, used for changing the default sample size of the simulation test performed by set.DAG (default n.test=100). Set n.test=0 to skip the DAG object test completely.

* Node argument EFU can be a logical expression (any function of previously defined node names), which must evaluate to TRUE/FALSE. Right-censoring for a specific observation then occurs only if: 1) The node value evaluated to 1 & 2) EFU evaluates to TRUE

* Added support for multivariate nodes, such as multivariate normal, copulas, etc. See a separate section on multivariate distributions in ?node.

* A specially reserved variable name "Nsamp" can be used in any node expression, always evaluates to the currently simulated sample size (a column of constant values). Works similarly to the network-specific reserved variables "Kmax" and "nF" (see ?network).

* Changed the format of plotDAG output. The internal (endogenous) nodes are no longer surrounded by circles. All latent nodes are surrounded by circles, all children of latent nodes are shown with dashed arrow.

* Switched internal storage of simulated data to data.table. The output is always a data.frame.


